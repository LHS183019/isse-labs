
---
项目目标
请你帮我用 Flask（后端） + HTML/CSS/JavaScript（前端） 设计一个 TodoList 任务管理系统，要求实现以下功能：
1. 用户可输入新的待办事项；
2. 待办事项展示在列表中；
3. 可删除任务；
4. 可标记任务为完成；
5. 任务可按照优先级分类（高/中/低）；
6. 任务可按类别（学习/工作/生活）进行分类与筛选。

---
 开发规范说明
目的：生成一个清晰分层、易于扩展的系统，便于教学演示与调试。
 所有代码请分模块编写，后端和前端逻辑清晰独立。
 路由命名：使用 RESTful 风格
 变量命名：驼峰命名法（addTask, getTasks）
 数据交互：全部使用 JSON
 错误处理：返回 "status": "error" 和 "message" 字段
 注释规范：每个函数写一句用途说明
 样式规范：使用浅灰背景 + 卡片式任务框，hover有轻微阴影
 代码测试：每完成一个接口后先用 Postman 测试，再接前端

---
一、技术栈与语言定义
- 后端框架：Python Flask
- 前端：HTML + CSS + JavaScript（原生，不使用框架）
- 数据格式：JSON
- 运行方式：Flask 提供 RESTful API，前端用 fetch() 调用接口

---
二、开发顺序（强制分步）
请按以下顺序生成与测试代码，每步都需自检说明。

---
第一步：后端接口设计
1. 设计 Flask 后端，包含以下路由：
  - GET /tasks：获取全部任务；
  - POST /tasks：新增任务；
  - PUT /tasks/<id>：修改任务状态（完成/未完成）；
  - DELETE /tasks/<id>：删除任务；
  - 可选：GET /tasks?category=xxx、GET /tasks?priority=high 支持筛选。
2. 每个任务对象字段如下：
{
  "id": 1,
  "title": "写实验报告",
  "category": "学习",
  "priority": "高",
  "completed": false
}
3. 暂不使用数据库，用内存列表（或 JSON 文件）模拟存储。
4. 后端返回统一格式：
{
  "status": "success",
  "data": [...],
  "message": "新增成功"
}
5. 编写 app.py，测试接口在 Postman 或浏览器中能正常返回。

---
 第二步：前端页面结构设计
1. 设计一个主页面 index.html，包含以下部分：
  - 输入框（输入待办事项标题）；
  - 下拉菜单（选择分类与优先级）；
  - “添加任务”按钮；
  - 任务展示区（列表形式，每项包含任务名、类别、优先级、状态、操作按钮）。
2. 页面使用简洁布局：
  - 顶部：输入表单；
  - 中间：任务列表；
  - 底部：筛选功能区（按分类 / 优先级）。
3. 样式说明：
  - 未完成任务灰色；
  - 已完成任务加删除线；
  - 高优先级任务红色标识。

---
 第三步：前端逻辑与交互（JavaScript）
1. 使用 fetch() 调用后端 API，实现以下功能：
  - 添加任务：POST；
  - 加载任务列表：GET；
  - 删除任务：DELETE；
  - 切换任务状态：PUT；
  - 分类/优先级筛选：GET（带查询参数）。
2. 每次操作后自动刷新列表。
3. 编写 static/script.js，逻辑清晰、模块化：
  - loadTasks()
  - addTask()
  - deleteTask(id)
  - toggleTask(id)
  - filterTasks()

